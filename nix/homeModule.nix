{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.programs.autobrowser;

  # Simplified TOML conversion function
  ruleToToml = rule:
    let
      # Handle rules in format "command:matcher_type.prop=value"
      parts = builtins.split ":" rule;
      command = builtins.elemAt parts 0;

      # Handle rules with no matchers (fallback case)
      hasMatcher = builtins.length parts >= 3;
      matcherStr = if hasMatcher then builtins.elemAt parts 2 else "fallback";

      # Create TOML rule section
      ruleSection = ''
        [[rules]]
        command = "${command}"
        [rules.matchers]
      '';

      # Process matchers (app.class=value, url.regex=value, etc.)
      processMatcher = matcherStr:
        if matcherStr == "fallback" then
          "fallback = true"
        else
          let
            # Split matcher into parts: type.property=value
            mparts = builtins.split "\\." matcherStr;
            mtype = builtins.elemAt mparts 0;

            # Handle cases where there might be no property
            mprop = if builtins.length mparts >= 3
                    then builtins.elemAt mparts 2
                    else "";

            # Extract the value part
            valueparts = builtins.split "=" matcherStr;
            mvalue = if builtins.length valueparts >= 3
                     then builtins.elemAt valueparts 2
                     else "true";

            # Map property names to TOML format
            propMap = {
              app = {
                class = "app_class";
                title = "app_title";
                display_name = "app_display_name";
                bundle_id = "app_bundle_id";
                bundle_path = "app_bundle_path";
                executable_path = "app_executable_path";
              };
              url = {
                host = "url_host";
                scheme = "url_scheme";
                regex = "url_regex";
              };
            };

            # Get the correct TOML property name
            tomlProp = if builtins.hasAttr mtype propMap && builtins.hasAttr mprop propMap.${mtype}
                      then propMap.${mtype}.${mprop}
                      else if mtype == "fallback"
                      then "fallback"
                      else "${mtype}_${mprop}";
          in
            "${tomlProp} = ${mvalue}";

      # Process multiple matchers separated by semicolons
      processMatchers = matcherStr:
        if matcherStr == "fallback" then
          "fallback = true"
        else
          let
            # Split multiple matchers (separated by semicolons)
            matcherParts = builtins.split ";" matcherStr;
            # Filter out empty parts and process each matcher
            matchers = builtins.filter (x: x != "") (lib.flatten matcherParts);
          in
            builtins.concatStringsSep "\n" (map processMatcher matchers);
    in
      ruleSection + processMatchers matcherStr;

  # Generate the TOML configuration
  configText = ''
    # Generated by NixOS Home Manager

    # Variables
    [variables]
    ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (k: v: "${k} = \"${v}\"") cfg.variables)}

    # Rules
    ${builtins.concatStringsSep "\n\n" (map ruleToToml cfg.rules)}

    # Default browser
    ${if cfg.default != "" then "default = \"${cfg.default}\"" else ""}
  '';
in {
  options.programs.autobrowser = {
    enable = lib.mkEnableOption "whenever to enable autobrowser as default browser";
    package = mkPackageOption pkgs "autobrowser" {};
    variables = mkOption {
      type = with lib.types; attrsOf str;
      description = "Attribute set of variables";
      default = {};
    };
    rules = mkOption {
      type = with lib.types; listOf str;
      example = ["firefox {}:app.class=telegram" "firefox -p work {}:url.regex='.*atlassian.org.*'"];
      description = "List of rules";
    };
    default = mkOption {
      type = lib.types.str;
      description = "Default browser command";
      default = "";
      example = "firefox {}";
    };

    desktop =
      pkgs.writeTextDir "share/applications/autobrowser.desktop"
      (lib.generators.toINI {} {
        "Desktop Entry" = {
          Type = "Application";
          Exec = "${cfg.package}/bin/autobrowser -config ${config.home.homeDirectory}/.config/autobrowser.toml -url %u";
          Terminal = false;
          Name = "Autobrowser: select browser by contextual rules";
          Icon = "browser";
          Categories = "Network;WebBrowser";
          MimeType = "x-scheme-handler/http;x-scheme-handler/https";
        };
      });
  };
  config = mkIf cfg.enable {
    xdg.configFile."autobrowser.toml".text = configText;

    home.packages =
      [cfg.package]
      ++ (
        if pkgs.stdenv.isLinux
        then [cfg.desktop]
        else []
      );

    xdg.mimeApps = mkIf pkgs.stdenv.isLinux {
      defaultApplications = {
        "x-scheme-handler/http" = "autobrowser.desktop";
        "x-scheme-handler/https" = "autobrowser.desktop";
        "x-scheme-handler/about" = "autobrowser.desktop";
      };
    };
  };
}
