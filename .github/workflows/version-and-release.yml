name: Version and Release

on:
  push:
    branches:
      - master

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1

      - name: Update Nix package version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" nix/packages/_default.nix

      - name: Commit version update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add nix/packages/_default.nix
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push

  test-linux:
    needs: [update-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Get the latest commit with version update
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - run: nix build
      - run: nix flake check

  test-macos:
    needs: [update-version]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Get the latest commit with version update
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "macos/go.mod"
          cache-dependency-path: "macos/go.sum"

      - name: Build macos
        run: make build-macos

  build-linux:
    needs: [update-version, test-linux]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "386", "arm64"]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Get the latest commit with version update
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "linux/go.mod"
          cache-dependency-path: "linux/go.sum"

      - name: Build linux
        run: GOARCH=${{ matrix.arch }} go build -C linux -o ../out/autobrowser cmd/autobrowser/main.go

      - name: Install nFPM
        run: go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest

      - name: Build artifacts
        run: |
          export GOARCH=${{ matrix.arch }}
          export VERSION=${{ needs.update-version.outputs.version }}

          nfpm package -p rpm --target out/ -f linux/build/nfpm.yaml
          nfpm package -p deb --target out/ -f linux/build/nfpm.yaml
          nfpm package -p apk --target out/ -f linux/build/nfpm.yaml
          nfpm package -p archlinux --target out/ -f linux/build/nfpm.yaml

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts-${{ matrix.arch }}
          path: |
            out/*.deb
            out/*.rpm
            out/*.apk
            out/*.zst

  build-mac:
    needs: [update-version, test-macos]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Get the latest commit with version update
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "macos/go.mod"
          cache-dependency-path: "macos/go.sum"

      - name: Build macos
        run: make build-macos

      - name: Install create-dmg
        run: git clone https://github.com/create-dmg/create-dmg.git

      - name: Build artifacts
        run: >
          ./create-dmg/create-dmg
          --volname "Autobrowser Installer"
          --window-pos 200 120
          --window-size 800 400
          --icon-size 100
          --icon "Autobrowser.app" 200 190
          --hide-extension "Autobrowser.app"
          --app-drop-link 600 190
          "out/Autobrowser-Installer.dmg"
          "out/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-artifacts
          path: |
            out/Autobrowser-Installer.dmg

  release:
    needs: [update-version, build-linux, build-mac]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Get the latest commit with version update
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: out
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ needs.update-version.outputs.version }}"
          name: "Release ${{ needs.update-version.outputs.version }}"
          files: out/*
          generate_release_notes: true
